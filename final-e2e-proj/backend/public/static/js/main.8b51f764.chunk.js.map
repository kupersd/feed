{"version":3,"sources":["cmps/AppHeader.jsx","cmps/FeedList.jsx","services/httpService.js","services/msgService.js","pages/Feed.jsx","store/actions/msgActions.js","App.jsx","serviceWorkerRegistration.js","store/reducers/msgReducer.js","store/reducers/userReducer.js","store/reducers/systemReducer.js","store/reducers/index.js","store/store.js","reportWebVitals.js","index.js"],"names":["AppHeader","className","src","alt","FeedList","msgs","map","msg","imgUrl","email","txt","_id","BASE_URL","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","res","console","log","dir","response","status","window","location","assign","msgService","add","query","filterBy","queryStr","remove","msgId","addedMsg","_Feed","state","onAddMsg","ev","preventDefault","props","addMsg","handleChange","target","name","value","setState","prevState","handleFilterChange","loadMsgs","this","onSubmit","placeholder","type","onChange","rows","cols","Component","mapDispatchToProps","filter","dispatch","Feed","connect","msgModule","App","path","component","Boolean","hostname","match","initialState","localLoggedinUser","sessionStorage","loggedinUser","JSON","parse","loggedInUser","users","isLoading","rootReducer","combineReducers","systemModule","action","userModule","user","userId","score","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8b51f764.chunk.js","sourcesContent":["export function AppHeader() {\n\n    return (\n        <section className=\"app-header\">\n            <div className=\"flex align-center space-around\">\n\n                <img src=\"favicon.png\" alt=\"\"/>\n                <h1>Feed Me Seymor</h1>\n                <h2>Tell us what's on your mind</h2>\n            </div>\n        </section>\n    )\n}","export function FeedList({ msgs }) {\n    return (\n        <ul className=\"feed-messages clean-list\">\n            {msgs.map(msg => {\n                return (\n                    <li key={msg._id} className=\"flex align-center\">\n                        <div className=\"avatar\">\n\n                            <img src={msg.imgUrl} alt=\"\" />\n                        </div>\n                        <div className=\"flex column\">\n                            <h4>{msg.email}</h4>\n                            <p>{msg.txt}</p>\n                        </div>\n                    </li>\n                )\n            }\n            )}\n        </ul>\n    )\n}","import Axios from 'axios'\n\nconst BASE_URL = process.env.NODE_ENV === 'production'\n    ? '/api/'\n    : '//localhost:3030/api/'\n\n\nvar axios = Axios.create({\n    withCredentials: true\n})\n\nexport const httpService = {\n    get(endpoint, data) {\n        return ajax(endpoint, 'GET', data)\n    },\n    post(endpoint, data) {\n        return ajax(endpoint, 'POST', data)\n    },\n    put(endpoint, data) {\n        return ajax(endpoint, 'PUT', data)\n    },\n    delete(endpoint, data) {\n        return ajax(endpoint, 'DELETE', data)\n    }\n}\n\nasync function ajax(endpoint, method = 'get', data = null) {\n    try {\n        const res = await axios({\n            url: `${BASE_URL}${endpoint}`,\n            method,\n            data\n        })\n        return res.data\n    } catch (err) {\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\n        console.dir(err)\n        if (err.response && err.response.status === 401) {\n            window.location.assign('/#/login')\n        }\n        throw err\n    }\n}","import { httpService } from './httpService'\n// import { storageService } from './asyncStorageService'\n// import userService from './userService'\n// import { utilService } from './utilService'\n\nexport const msgService = {\n  add,\n  query,\n  remove\n}\n\nconst imgURL1 = 'https://tinyfac.es/data/avatars/03F55412-DE8A-4F83-AAA6-D67EE5CE48DA-500w.jpeg'\nconst imgURL2 = 'https://tinyfac.es/data/avatars/FBEBF655-4886-455A-A4A4-D62B77DD419B-200w.jpeg'\nconst imgURL3 = 'https://tinyfac.es/data/avatars/A7299C8E-CEFC-47D9-939A-3C8CA0EA4D13-200w.jpeg'\n// More ways to send query params:\n// return axios.get('api/toy/?id=1223&balance=13')\n// return axios.get('api/toy/?', {params: {id: 1223, balanse:13}})\n\nfunction query(filterBy) {\n  var queryStr = (!filterBy) ? '' : `?txt=${filterBy.txt}`\n  return httpService.get(`msg${queryStr}`)\n  \n}\n\nfunction remove(msgId) {\n  return httpService.delete(`msg/${msgId}`)\n  // return storageService.delete('msg', msgId)\n\n}\nasync function add(msg) {\n\n  const addedMsg = await httpService.post(`msg`, msg)\n\n  // msg.byUser = userService.getLoggedinUser()\n  // msg.aboutUser = await userService.getById(msg.aboutUserId)\n  // const addedMsg = storageService.post('msg', msg)\n\n  return addedMsg\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { FeedList } from '../cmps/FeedList'\nimport { loadMsgs, addMsg } from '../store/actions/msgActions'\n\nclass _Feed extends Component {\n    state = {\n        msg: { txt: '', email: '' },\n    }\n\n    async componentDidMount() {\n        try {\n            await this.props.loadMsgs()\n        } catch (err) {\n            console.log(err)\n        }\n      }\n\n    onAddMsg = async ev => {\n        ev.preventDefault()\n        try {\n            await this.props.addMsg(this.state.msg)\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    handleChange = ev => {\n        const { name, value } = ev.target\n        this.setState(prevState => {\n            return {\n                ...prevState,\n                msg: {\n                    ...prevState.msg,\n                    [name]: value\n                }\n            }\n        })\n    }\n    \n    handleFilterChange = async ev => {\n        try{\n            await this.props.loadMsgs({txt: ev.target.value})\n        } catch(err){\n            console.log(err);\n        }\n    }\n\n\n    render() {\n        const { msg } = this.state\n        const { msgs } = this.props\n        return (\n            <section className=\"feed\">\n\n                <form className=\"compose\" onSubmit={this.onAddMsg}>\n                    <input\n                        placeholder=\"Email\"\n                        type=\"text\"\n                        name=\"email\"\n                        onChange={this.handleChange}\n                        value={msg.email} />\n                    <textarea\n                        rows=\"5\"\n                        cols=\"60\"\n                        placeholder=\"Message\"\n                        name=\"txt\"\n                        onChange={this.handleChange}\n                        value={msg.txt} />\n\n                    <button>SUBMIT</button>\n                </form>\n\n                <div className=\"filter\">\n                    <input\n                        type=\"text\"\n                        name=\"filterBy\"\n                        onChange={this.handleFilterChange}\n                        placeholder=\"Search\"\n                        />\n                </div>\n\n                <FeedList msgs={msgs} />\n            </section>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        msgs: state.msgModule.msgs\n    }\n}\nconst mapDispatchToProps = {\n    loadMsgs,\n    addMsg\n}\n\nexport const Feed = connect(mapStateToProps, mapDispatchToProps)(_Feed)","import { msgService } from '../../services/msgService'\n\nexport function loadMsgs(filter) {\n  return async dispatch => {\n    try {\n      const msgs = await msgService.query(filter)\n      dispatch({ type: 'SET_MSGS', msgs: msgs })\n\n    } catch (err) {\n      console.log('MsgActions: err in loadMsgs', err)\n    }\n  }\n}\n\nexport function addMsg(msg) {\n  return async dispatch => {\n    try {\n      const addedMsg = await msgService.add(msg)\n      dispatch({ type: 'ADD_MSG', msg: addedMsg })\n    } catch (err) {\n      console.log('MsgActions: err in addMsg', err)\n    }\n  }\n}\n\nexport function removeMsg(msgId) {\n  return async dispatch => {\n    try {\n      await msgService.remove(msgId)\n      dispatch({ type: 'REMOVE_MSG', msgId })\n    } catch (err) {\n      console.log('MsgActions: err in removeMsg', err)\n    }\n  }\n}\n","import React from 'react'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport { AppHeader } from './cmps/AppHeader'\n\nimport { Feed } from './pages/Feed'\n\n\nexport function App() {\n  return (\n    <div className=\"app\">\n      <Router>\n        <header>\n          <AppHeader />\n        </header>\n        <main>\n          <Switch>\n            <Route path=\"/\" component={Feed} />\n          </Switch>\n        </main>\n\n      </Router>\n    </div>\n  )\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  msgs: [],\n}\n\nexport function msgReducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case 'SET_MSGS':\n      return { ...state, msgs: action.msgs }\n    case 'ADD_MSG':\n      return { ...state, msgs: [...state.msgs, action.msg] }\n    case 'REMOVE_MSG':\n      return { ...state, msgs: state.msgs.filter(msg => msg._id !== action.msgId) }\n    case 'UPDATE_MSG':\n      return {\n        ...state,\n        msgs: state.msgs.map(msg =>\n          msg._id === action.msg._id ? action.msg : msg\n        )}\n    default:\n      return state\n  }\n}\n","let localLoggedinUser = null\nif (sessionStorage.loggedinUser) localLoggedinUser = JSON.parse(sessionStorage.loggedinUser)\n\nconst initialState = {\n  loggedInUser: localLoggedinUser,\n  users: []\n}\n\nexport function userReducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case 'SET_USER':\n      return { ...state, loggedInUser: action.user }\n    case 'REMOVE_USER':\n      return {\n        ...state,\n        users: state.users.filter(user => user._id !== action.userId)\n      }\n    case 'SET_USERS':\n      return { ...state, users: action.users }\n    case 'SET_SCORE':\n      return { ...state, loggedInUser: { ...state.loggedInUser, score: action.score } }\n    default:\n      return state\n  }\n}\n","const initialState = {\n  isLoading: false\n};\n\nexport function systemReducer (state = initialState, action = {}) {\n  switch (action.type) {\n    case 'LOADING_START':\n      return { ...state, isLoading: true }\n    case 'LOADING_DONE':\n      return { ...state, isLoading: false }\n    default: return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { msgReducer } from './msgReducer'\nimport { userReducer } from './userReducer'\nimport { systemReducer } from './systemReducer'\n\nexport const rootReducer = combineReducers({\n  systemModule: systemReducer,\n  msgModule: msgReducer,\n  userModule: userReducer\n})\n","import { createStore, applyMiddleware, compose } from 'redux'\n\nimport thunk from 'redux-thunk'\nimport { rootReducer } from './reducers'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport const store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n)\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { App } from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport './assets/styles/main.scss'\nimport { store } from './store/store'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}